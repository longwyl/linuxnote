--------------------------------------------------------------------------------------------
				content
--------------------------------------------------------------------------------------------
grep : 文本过滤工具之
egrep : 支持扩展正则表达式
fgrep: 不支持正则表达式 但是速度快

sed： stream editor 流编辑器 文本编辑器
awk： linux上的实现为gawk 文本报告生成器（格式化文本）

正则表达式：regual Expression  REGEXP
	有一类特殊字符及文本字符所编写的模式， 其中有些字符不表示其字面意义 ，而是用于通配和控制功能：
  分两类：
		基本 : BRE
		扩展正则表达式：ERE
--------------------------------------------------------------------------------------------
				grep
--------------------------------------------------------------------------------------------

grep: Global search REgular expression and Print out the line.
   模式：由正则表达式的原字符及文本字符所编写出的过滤条件;
  正则表达式引擎：
       grep [OPTION...] PATTERNS [FILE...]
       grep [OPTION...] -e PATTERNS ... [FILE...]
       grep [OPTION...] -f PATTERN_FILE ... [FILE...]

Options 
	--color
	-i: 忽略大小写	
	-o: 只显示匹配到的内容（并非整行）
	-v 取反
	-E
	-q
	-ABC
--------------------------------------------------------------------------------------------
				Regular expression
--------------------------------------------------------------------------------------------

基本正则表达式原字符
	字符匹配：
		. 匹配任意字符
		[] : 匹配制定范围内的任意单个字符
		[^]: 匹配制定范围外的任意单个字符		
			[:digit:]
			[:lower:] [:upper:]
			[:alpha:] [:alnum:] [:space:][:punct:]
	匹配次数:用在要指定其出现的次数的字符的后面，
		 用于限制其起那面字符出显得次数;
			 * : 匹配其前面的字符任意次 0 ，1 ，2 。。 。
			.* : 匹配而任意长度的任意字符
			\? : 匹配其前面的字符0次或1次：其前面的字符可有可无
			\+ : 匹配其其前面的字符一次或多次：至少一次
			\{m\} : 匹配其前面的字符m次;精确匹配
			\{m,n\} ： 匹配前面的字符至少m次至多n次;
				\{0,n\}: 至多n次
				\{m,\}: 至少m次
	位置锚定:
			^: 行首锚定 ： 用与模式的最左测
			$: 行尾锚定： 由于模式的左右测;
			^PATTERN$ : 用于PATTERN 来匹配整行;
			^$ : 空白行：
			^[[:space:]]*$ : 空行由包括空白字符的行;
			单词：非特殊字符组成的连续字符都称之为单词;
  			单词锚定：
				\< or \b ： 词首锚定， 用于单词的左侧
				\> or \b ： 词尾锚定， 用于单词的右侧
				\<PATTERN\> : 匹配整个单词;
	分组及引用
  			\(\) : 将一个或多个字符捆绑在一起，当作一个整体进行处理
			NOTE: 分组括号中的模式匹配到的内容会被正则表达式引擎自动记录于内播的变量中，这些变量为：
				\1 :模式最左侧起，第1个左括号以及与之匹配的右括号之间的模式所匹配到的字符
				\2 :模式最左侧起，第2个左括号以及与之匹配的右括号之间的模式所匹配到的字符
				\3 :模式最左侧起，第3个左括号以及与之匹配的右括号之间的模式所匹配到的字符
				\4 :...
	或者：
		|  如果选择其中一个 记得加括号
---------------------------------------------------------------------------------------------
				regular expression
---------------------------------------------------------------------------------------------
note from lukesmith 
		. - any one character
		* - Match any number of previous (including 0)
		+ - Match any number of previous (once more)
		$ - End of the line 
		^ - start of the line 
		\S - any non-whitespace character
		\s - any withespace character
		? - optional
		[a-z] - any lowercase letter
		[A-Z] - any uppercase letter
		[A-Za0z] - any letter
		[0-9] - any number
		\ - escape somehting 
--------------------------------------------------------------------------------------------
				扩展正则表达式
--------------------------------------------------------------------------------------------
扩展正则表达式
   		字符匹配：
			. : 匹配任意单个字符
			[]：指定范围内的任意字符
			[^] :指定范围外的任意单个字符
 		次数匹配
			*: 任意次前面出现的字符或分组
			?: 0次或1次， 其前面的字符可有可无
			+： 前面的字符至少出现一次
			{m} ： 前面的字符出现m次
			{m,n} : 前面的字符至少出现m次，至多出现n次
		位置锚定：
			^: 行首锚定
			$: 行尾锚定
			^$: 空白行
			^[[:space:]]*$ :包含任意个数空白字符的行
			\< , \b ：次首锚定
			\> , \b : 次尾锚定
		分组及引用
			（）： 分组：括号内的模式匹配的字符会被记录与正则表达式引擎的内部变量中;
			后向引用了： \1 \2 
			a|b : a or b
			C|cat : C or cat
			(c|C)at : cat or Cat

--------------------------------------------------------------------------------------------
				cut
--------------------------------------------------------------------------------------------
cut :
		cut OPTION...[FILE]
			OPTION:
				-d
				-f : 
					#: 指定的单个字段
					#-#： 连续的多个字段
					#，#，# 不连续的多个字段

--------------------------------------------------------------------------------------------
				wc
--------------------------------------------------------------------------------------------
wc :

--------------------------------------------------------------------------------------------
				sort
--------------------------------------------------------------------------------------------
sort:
		sort [OPTION]... file
			OPTION:
				-t CHAR: 指定分割符
				-k :用于排序比较的字段
				-n : 根据数字大小进行排序
				-r : reverse 逆序排序
				-u : 重复的内容只保留一份


--------------------------------------------------------------------------------------------
				uniq
--------------------------------------------------------------------------------------------
uniq:
				-c: 显示每行的重复次数
				-u：仅显示未曾重复的行
				-d：仅显示重复过的行
--------------------------------------------------------------------------------------------
				diff
--------------------------------------------------------------------------------------------
diff: 

--------------------------------------------------------------------------------------------
				patch
--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
				sed:Stream Editor流编辑器,行
--------------------------------------------------------------------------------------------
高级编辑命令:
	h:把模式空间中的内容覆盖到保持空间中;	
	H:吧模式空间中的内容追加到保持空间中:
	g:吧保持空间中的内容覆盖到模式空间中;
	G:吧保持空间中的内容追加到模式空间中;
	x:把空间模式中的内容与保持空间中的内容互换
	n:覆盖读取匹配到的行的下一行至模式空间中;
	N:追加读取匹配到的行的下一行至模式空间中;
	d:删除模式空间中的行;
	D:删除多行模式空间中的所有行;
	
	example : 
		sed -n 'n;p' file :显示偶数行:
		sed '1!G;h;$!d' file 逆序显示文件的内容
		sed '$!d' file 取出最后一行;
		sed '$!N;$!D' file 取出最后两行;
		sed '/^$/d;G' file 删除原有的搜由空白行,而后为所有的非空白行添加一个宫白行
		sed 'n;d' file 显示奇数行


--------------------------------------------------------------------------------------------
			awk
--------------------------------------------------------------------------------------------
awk:报告生成器:格式化文本输出;
版本:awk , new awk , gawk
基本用法:
	gawk [options] 'program' file...
program; pattern{action statements}
	语句之间用分号分割
	
	print, printf
	选项:	
	 	-F:指明输入时用到的字段分隔符
		-v var=value: 自定义变量;

1. print
	print item1, item2, ...
	要点:
		1.逗号左分隔符;		
		2.输出的item可以使字符串,也可以是数值:当前记录的字段,变量,或awk的表达式;
		3.如果省略item, 相当于print $0;
2.变量
	内建变量
		FS : input field seperator,默认为空白字符
		OFS: output field seperator, 默认为空白字符
		RS:input record seperator,输入的换行符
		OS:out put field seperator, 输出的换行符
		NF: number of field : ator, 行的字段数量
		FNR:个文件分别结束
		FILENAME
		ARGV:数组,保存的是命令行所给定的各参数;
		ARGC:命令行参数的个数
		NR:行号
	自定义变量
		1.-v var=value
			变量名区分字符大小写;
		2.在program中直接定义
			

printf命令
	格式化输出的命令;
		printf format, item1,item2,...
		1.format必须给出
		2.不会自动换行,需要显示给出换行控制符,\n
		3.format需要分别为后米那的每个item指定一个格式化符号;
		格式符:
		%c %d %e %f %g %G %s %u %%
		
		修饰符号:
		#[.#]
		第一个#控制显示的宽度;第二个#表示小鼠点后面的精度;	
		%3.1f
		-:左对齐
		+:显示数值的符号
4.操作符
	算数操作符:
		x+y,x-y,x*y,x/y,x^y,x%y
		-x
		+x:转换为数值;
	字符串操作符:没有符号的操作符,字符串链接
	赋值操作符:
		=,+=,-=,*=,/=,%=,^=
		++,--
	比较操作符:
		>, >=,<=,<,==,!=
	模式匹配符
			:是否匹配
			!~:是否不匹配
	逻辑操作符:
		&& || ~
	函数调用:\
		function_name(argu1,argu2,...)
	条件表达式:
		selector?if-true-expression:if-false-expression

5.pattern
	1.空模式:处理文件的每一行
	2./regular expression/:仅处理能够被此处正则表达式匹配到的行
	3.relational expression: 关系表达式: 结果为"真"才会被处理;
		真:结果为非0值,
	4.line ranges : 行范围,地址定接
		startlie , endline:/pat1/,/pat2/ 
	5.BEGIN/END模式
		BEGIN{}:仅在开始处理文件中的文本之前执行一次;	
		END{}: 仅在文本处理完之后执行一次
6.常用的action		
	1.expressions
	2.cnotrol statement: if while 
	3.compound statements:组合语句;	
	4.input statements	
	5.output statements
	
7.控制语句
	if(condition){statement}
	
	if(condition){statement} else {statements}
	
	while(condition){statemtns}
	
	do {statements} while(condition)

	for(expr1;expr2;expr3) {statements}
	break continue
	delete exit
	









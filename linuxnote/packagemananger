---------------------------------------------------------------------
			linux的应用程序包管理
---------------------------------------------------------------------
API:Application Program interface 
ABI:Applicatoin Binary Interface 
库级别虚拟化:
		Linux:WinE
		Windows:Cywin
---------------------------------------------------------------------
			程序包管理器
---------------------------------------------------------------------
debian : dpt , dpkg, "*.deb"
redhat: redhat package manager, rmp,".rmp"; rpm is package manager;
S.u.S.e : rpm,"*.rpm";
Gentoo: ports
ArchLInux:pacman AUR

功能:将编译好的应用程序的个组成文件打包成一个或几个程序包文件,从而更方便的实现程序包的安装,升级,卸载,查询,数据库维护等管理操
程序包管理器的组成格式:
	1.程序包的组成清单(每个程序包都独立实现);
		文件清单
		安装或卸载是运行的脚本;
	2.数据库(共用)
		程序包的名称和版本;
		依赖关系;	
		功能说明;
		安装生成的个文件的文件路径及校验码信息:
		等等等
---------------------------------------------------------------------
			程序包的格式
---------------------------------------------------------------------
源代码:name-VERSION.tar.gz //redis-3.0.2.tar.gz
		VERSION: major.minor.release
rpm 包的命名格式:
	name-VERSION-release.arch.rpm // redis-3.0.2-1.centos7.x64.rpm
		VERSION: major.minor.release 
		release.arch: rpm包的发行号	
			release.os:2.el7.i386.rpm
			archetecture:i386,X64(amd64),ppc,noarch
拆包:把一个应用程序按照不同的功能模块拆成小包;
		主包:name-VERSION-release.arch.rpm	
		子包:name-function-VERSION-release.arch.rpm
			functoin: devel, untils, libs
前端工具:自动解决以来关系;
	yum:rpm包管理器的前端工具:
	apt-get (apt-cache):deb包管理的前端工具
	aypper:suse的rpm包管理器的前端工具;
	dnf:fedora22+ 系统上的rpm包管理器的前端工具;

---------------------------------------------------------------------
			获取程序包的路径		
---------------------------------------------------------------------
1系统发行版的光盘或是管翻的文件服务器(或是镜像站点)
	http://mirrors.aliyun.com
	http://mirrors.sohu.com
	http://mirrors.163.com
2项目的官方站点
3第三方组织
	EPEL	
	搜索引擎:
		http://pkgs.org
		http://rpmfind.net
		http://rpm.pbone.net

---------------------------------------------------------------------
			Centos 系统上rpm命令的管理程序包
---------------------------------------------------------------------
rpm [option] [package_file]
	安装:-i --install
	升级:-U --update
	查询:-q --query
	卸载:-e --erase
	校验:-V --verify
	数据库维护:--bulildb,--initdb

安装:
	rpm {-i|--install} [install-options] PACKAGE_FILE ...
 	
	rpm -ivh package_file...
	
general options:
 	-v : verbose , 详细信息
	-vv: 更详细的信息

	[install-options]:
	-h : hash marks 出处进度条每个#表示2% 的进度:
	--test : 测试anzhaung, 检查并报告以来关系及冲突消息等; 
	--nodeps: 忽略以来关系,不建议;
	--replacepkgs:重新安装

	note: rpm可以自带脚本;
	四类 : --noscripts 4类脚本都不执行
		preinstall:安装前执行脚本 , % pre , -- nopre
		postinstall:安装后 , % post, --nopost
		preuninstall:卸载过程中 ,%preun , --nopreun
		postuninstall:卸载过程完成后%postun, --nopostun
	--nosignature: 不检查包签名信息,不检查来源的合法性
	--nodigest: 不检查 包的完整性信息;
查询:
	rpm {-q|--query} [select-options] [query-options]
	
	[select-options]
	package_name : 查询指定的程序包是否已经安装,及其版本;		
	-a ,--all: 查询所有应景安装过得包
	-f file: 查询指定的文件由那个程序包安装生成;		
	-p ,--package PACKAGE_FILE:实现对未安装的程序包执行查询操作;
	- whatprovides CAPABILITY : 查询指定的capability有哪个程序包提供;
	- whatrequires CAPABILITY: 查询指定的capability被那个包所依赖;
	
	[query-options]
	--changelog: 查询rpm包的changlog:
	-l --list 程序安装生成的所有文件列表;	
	-i,--info 程序包相关的信息,版本号大小所属的包组等信息
	-d --docfiles:查询指定的程序包提供的文档
	--provides: 列出指定的程序包提供的所有capability;
	--scripts 查看程序包自带的脚本片段
校验:
	 rpm {-V|--verify} [select-options] [verify-options]


包的合法性和来源验证
	来源合法性验证:
		数字签名:
	
数据库重建:
	rpm管理器数据库路径:/var/lib/rpm
	查询操作:通过此处的数据库进行;
	
	rpm --initdb: 初始化数据库,当前无任何数据库可实时话创建一个新的:
	    --rebuilddb:重新构建,通过读取当前系统上所有已经安装过的程序包进行重新创建:

---------------------------------------------------------------------
			如何使用管盘当作本地yum仓库
---------------------------------------------------------------------
(1).挂载管盘之某目录,
(2).创建配置文件
[Centos]
name=
baseurl=
gpgcheck=
enabled=

yum的命令选项:
	--nogpgcheck
	-y
	q:静默模式:
	--disablrepo=repoidglob:临时禁用此处指定的repo
	--enablerepo=repoidglob:
---------------------------------------------------------------------
			yum仓库中配置变量
---------------------------------------------------------------------
	$releasever
	$arch
	$basharch:基础平台

---------------------------------------------------------------------
			如何自制yum仓库
---------------------------------------------------------------------
	createrepo:
		creatrepo [optoin]<derectory>

---------------------------------------------------------------------
			如何实现源码编译安装
---------------------------------------------------------------------
testapp-VERSION-release.src.rpm --> 安装后,使用rpmbuild命令制作成二进制格式的rpm包,然后再安装

项目管理器:
	make 
	java:maven


编译安装三步骤(configure --> Makefile.in --> makefile)

	./configure
		(1) 通过选项传递参数,指定启用特性, 安装路径,执行时会参考用户的指定及Mkakeflie.in 文件生成makefile

		(2) 检查依赖到的外部环境;
	make 
		根据makefile文件,构建应用程序

	make install
		安装
开发工具:
	autuconf:生成configure脚本
	automake:生成Makefilein文件

开源程序源代码的获取
	官方自建站点:
		apache.org (ASF)
		mariadb.org
	代码托管站点:
		SourceForge 
		Github.com
		code.google.com
编译c源代码:
	提供开发工具及开发环境
	开发工具:make,gcc
	开发环境:开发库,头文件 glibc:标准库

通过"包组"提供开发组件;	
		Development Tools, Sever Platform Development

第一步: configure脚本
	选项:指定安装位置,指定启用的特性
		--help 
			安装路径设定:
				--prefix=/path/to/somewhere;指定默认安装位置:
				--sysconfdir=/pth/to/somewhere;配置文件安装位置;
			System types:
			OPtoinal Features;
				--disable-FETURE
				--ENABLE_FEATURE[=ARG]
			Optional Packages 
				--with-PACKAGES[=ARG]
				--without-PACKAGE
第二步:
	make
第三步:
 	make install 
		安装后的配置;	
			1.导出二进制程序的目录之path环境变量中
				编辑文件/etc/profiled/Name.sh
					export PATH=/pth/to/bin:$PATH 
			2.导出库文件路径
				编辑文件/etc/ld.so.conf.d/name.conf
				让系统重新生成缓存
					ldconfig [-v]
			3.导出头文件
				ln -sv 

			4.导出帮助手册
				编辑/etc/man.config

















